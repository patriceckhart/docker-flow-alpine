#!/usr/bin/with-contenv /bin/bash
set -ex

DB_DATABASE=${DB_DATABASE:="db"}
DB_HOST=${DB_HOST:="db"}
DB_USER=${DB_USER:="admin"}
DB_PASS=${DB_PASS:="pass"}
REPOSITORY_URL=${REPOSITORY_URL:=""}
VERSION=${VERSION:="master"}
BASE_URI=${BASE_URI:=${BASE_URI:=""}}

# Provision conainer at first run
if [ -f /data/releases/current/composer.json ] || [ -z "$REPOSITORY_URL" ]
then
	echo "Do nothing, Neos Flow is already there or REPOSITORY_URL env variable not set"
else
	mkdir -p /data/transfer
	mkdir -p /data/releases
	mkdir -p shared/Data/Logs
	mkdir -p shared/Data/Persistent
	mkdir -p shared/Configuration
	mkdir -p shared/Web/_Resources


	###
	# Generate Settings.yaml
	###
	SETTINGS_SOURCE_FILE="/Settings.yaml"
	SETTINGS_WITH_BASE_URI_SOURCE_FILE="/SettingsWithBaseUri.yaml"
	SETTINGS_TARGET_FILE="/data/shared/Configuration/Settings.yaml"
	# Only proceed if file DOES NOT exist...
	if [ -f $SETTINGS_TARGET_FILE ]
	then
		echo "Settings.yaml exists, no need to generate it"
	else
		mkdir -p $(dirname $SETTINGS_TARGET_FILE)
		if [[ -z "$BASE_URI" ]]; then
			cat $SETTINGS_SOURCE_FILE > $SETTINGS_TARGET_FILE
			echo "Configuration file $SETTINGS_TARGET_FILE created."
		else
			cat $SETTINGS_WITH_BASE_URI_SOURCE_FILE > $SETTINGS_TARGET_FILE
			sed -i -r "1,/baseUri:/s~baseUri: .+?~baseUri: '$BASE_URI'~g" $SETTINGS_TARGET_FILE
			echo "Configuration file $SETTINGS_TARGET_FILE with baseUri set to $BASE_URI created."
		fi
		sed -i -r "1,/dbname:/s~dbname: .+?~dbname: '$DB_DATABASE'~g" $SETTINGS_TARGET_FILE
		sed -i -r "1,/user:/s~user: .+?~user: '$DB_USER'~g" $SETTINGS_TARGET_FILE
		sed -i -r "1,/password:/s~password: .+?~password: '$DB_PASS'~g" $SETTINGS_TARGET_FILE
		sed -i -r "1,/host:/s~host: .+?~host: '$DB_HOST'~g" $SETTINGS_TARGET_FILE
		sed -i -r "1,/baseUri:/s~baseUri: .+?~baseUri: '$BASE_URI'~g" $SETTINGS_TARGET_FILE
	fi


	###
	# Install into /data/transfer and link shared
	# Needed to serve as a deployment target
	###
	cd /data/transfer
	git clone -b $VERSION $REPOSITORY_URL .
	composer install

	rsync -a /data/transfer/ /data/releases/current/
	rm -rf /data/releases/current/Web/_Resources
	mkdir -p /data/releases/current/Data
	ln -s /data/shared/Data/Logs /data/releases/current/Data/Logs
	ln -s /data/shared/Data/Persistent /data/releases/current/Data/Persistent
	ln -s /data/shared/Configuration/Settings.yaml /data/releases/current/Configuration/Settings.yaml
	ln -s /data/shared/Web/_Resources /data/releases/current/Web/_Resources


	###
	# Create and import DB
	###
	echo "CREATE DATABASE IF NOT EXISTS $DB_DATABASE" | mysql -u $DB_USER -p$DB_PASS -h $DB_HOST
	if [ -f /data/shared/Data/Persistent/db.sql ]
		then
			mysql -u $DB_USER -p$DB_PASS -h $DB_HOST $DB_DATABASE < /data/shared/Data/Persistent/db.sql
	fi


	###
	# Run final commands on the installed website
	###
	cd /data/releases/current

	if [ -f /data/releases/current/beard.json ]
		then
			beard patch
	fi

	./flow doctrine:migrate

	./flow resource:publish

	chown www-data:www-data -R /tmp/
	chown www-data:www-data -R /data/
	chmod g+rwx -R /data/
	
	# Set ssh permissions
	if [ -z "/data/.ssh/authorized_keys" ]
		then
			chown www-data:www-data -R /data/.ssh
			chmod go-w /data/
			chmod 700 /data/.ssh
			chmod 600 /data/.ssh/authorized_keys
	fi

fi
